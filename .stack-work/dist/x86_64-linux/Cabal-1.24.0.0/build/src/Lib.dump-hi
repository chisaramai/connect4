
==================== FINAL INTERFACE ====================
2016-11-20 11:01:20.680937 UTC

interface connect4-0.1.0.1-2fMdAgEIDS51w47GvFtft7:Lib 8001
  interface hash: 15db9943f86b57cf83aae1ed6fa6939b
  ABI hash: 8c5724a7ccbdbe53efa119d79b9a99fa
  export-list hash: f34c80f3b600667664d7768f3041a5c6
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: b159a15c55fa7c6870cb2eb79bbae5a5
  sig of: Nothing
  used TH splices: False
  where
exports:
  Lib.concatGrid
  Lib.dropToken
  Lib.endGame
  Lib.findWinner
  Lib.getChoiceOf
  Lib.mkGrid
  Lib.playWith
  Lib.printAllToken
  Lib.printToken
  Lib.rollDice
  Lib.showGrid
  Lib.theme
module dependencies: GridScan Types
package dependencies: ansi-terminal-0.6.2.3@ansi-terminal-0.6.2.3-448ipfN5j28Ha0AgPiJmdI
                      array-0.5.1.1@array-0.5.1.1 base-4.9.0.0*
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1 random-1.1@random-1.1-54KmMHXjttlERYcr1mvsAe*
                      time-1.6.0.1@time-1.6.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
import  -/  ansi-terminal-0.6.2.3@ansi-terminal-0.6.2.3-448ipfN5j28Ha0AgPiJmdI:System.Console.ANSI 1565f362ecfef470e206e8f337ab1f4d
import  -/  ansi-terminal-0.6.2.3@ansi-terminal-0.6.2.3-448ipfN5j28Ha0AgPiJmdI:System.Console.ANSI.Common 24b0e5493e83ac3d41ce56ed4609c6c7
import  -/  ansi-terminal-0.6.2.3@ansi-terminal-0.6.2.3-448ipfN5j28Ha0AgPiJmdI:System.Console.ANSI.Unix 27d28df4076211715f9e8c3aa4c39751
import  -/  base-4.9.0.0:Control.Concurrent 98a3a12a2ace3d27758947d9f1041f90
import  -/  base-4.9.0.0:Data.Char eb33dc25ecb52d018a0ca26590e2b50b
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:Data.List 49b86831b79b49ce5d4d9416ecba61df
import  -/  base-4.9.0.0:Data.Maybe 5f2ba364cbe65c060bc5436bc0b9d049
import  -/  base-4.9.0.0:Data.OldList 0058409f994fb13ae0616e3f1e5b4dae
import  -/  base-4.9.0.0:Data.Tuple acb0ed10307ed88df6c81b8589f4de16
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.IO.Handle a1938753d58593f0a419f85b67aa7cd3
import  -/  base-4.9.0.0:GHC.IO.Handle.FD adf0145182d1c6eb38b2b8ce5a292e84
import  -/  base-4.9.0.0:GHC.IO.Handle.Types a94506fe2fe805a97a84bccd65c71eb8
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:GHC.Num 48f506a8f4ecf06285d0a0706594dcc0
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:GHC.Unicode 2343b0871604cc5116abba8f24d75b42
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  base-4.9.0.0:System.Environment ee0914a962f5508d0fd404c89ee4999b
import  -/  base-4.9.0.0:System.IO eb1d40aa793a4047069a5023f2ebcfe3
import  -/  base-4.9.0.0:Text.Read 9c1be14f7e5eac8b18bcb566c5763677
import  -/  GridScan 40f4ecd59bd4f25f9efe09d83684e068
  exports: e9e873a635119bfe5bbd6c58336c914a
  scan 418535b58624c8d72a5435b0a0be147b
import  -/  Types 8e83e1c88a0296f6342caaab81b2b15f
  exports: aa93b45a04b6bc8941a1182e57c5047f
  Game a20bb6290573ac399a4c1ae356f6fa30
  Game e19c99fc34502f0de2d229aef41b3024
  Grid b0c1bcaa5709aad78e711871c6937026
  Player de5b092781575bf8e61208884b600228
  color f2aaa06067c805e64db99ab2fba13952
  grid ab5f6ad2e43895b15c92d6748e064e5a
  players 15b390a21f7bc006b400d46f6150479c
  token abdc8236c9d2c9dbceaa5d4f1accce19
  winBy 3708aa81492086d6b0a9b603bb904caf
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map 24b19ef74cea78e4c18332bed9f0491d
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Set 3ed2324fd1e757464a8ac2b636a64e5a
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base 7491ab24d955eec25fba8e0d89b657f1
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
import  -/  random-1.1@random-1.1-54KmMHXjttlERYcr1mvsAe:System.Random 12e582ce6a18ca02c107789bb28c509c
65e5ed73bbb9e27cfda8862f2329d405
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Lib.$trModule2 Lib.$trModule1) -}
0e773de65bfe538c0080b61645a6611a
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Lib"#) -}
6a194951dd6332e18f4f8c3d86aa5929
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "connect4-0.1.0.1-2fMdAgEIDS51w47GvFtft7"#) -}
cb2926ba6b1d1e305c24b0ff0c63a662
  $wdropToken ::
    GHC.Types.Char -> GHC.Prim.Int# -> Types.Grid -> [[GHC.Types.Char]]
  {- Arity: 3, Strictness: <L,U><S,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Types.Char)
                   (ww :: GHC.Prim.Int#)
                   (w1 :: Types.Grid) ->
                 let {
                   $j :: [GHC.Base.String] -> [GHC.Base.String] -> [[GHC.Types.Char]]
                     {- Arity: 2, Strictness: <S,1*U><L,U> -}
                   = \ (x :: [GHC.Base.String])[OneShot]
                       (ds1 :: [GHC.Base.String])[OneShot] ->
                     case x of wild {
                       [] -> case GHC.List.init2 ret_ty [[GHC.Types.Char]] of {}
                       : x1 xs
                       -> GHC.Base.++
                            @ [GHC.Types.Char]
                            (GHC.List.init1 @ GHC.Base.String x1 xs)
                            (GHC.Types.:
                               @ [GHC.Types.Char]
                               (let {
                                  originalColumn :: GHC.Base.String
                                  = GHC.List.$w!! @ GHC.Base.String w1 (GHC.Prim.-# ww 1#)
                                } in
                                case Lib.$wgo originalColumn 0# of ww1 { DEFAULT ->
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.<=# ww1 0#) of wild1 {
                                  GHC.Types.False
                                  -> case originalColumn of wild2 {
                                       [] -> case GHC.List.init2 ret_ty [GHC.Types.Char] of {}
                                       : ipv ipv1
                                       -> case ww1 of ds2 {
                                            DEFAULT
                                            -> case GHC.List.splitAt_$s$wsplitAt'
                                                      @ GHC.Types.Char
                                                      ipv1
                                                      (GHC.Prim.-# ds2 1#) of ww2 { (#,#) ww3 ww4 ->
                                               GHC.Base.++
                                                 @ GHC.Types.Char
                                                 (GHC.List.init1 @ GHC.Types.Char ipv ww3)
                                                 (GHC.Types.: @ GHC.Types.Char w ww4) }
                                            1#
                                            -> GHC.Base.++
                                                 @ GHC.Types.Char
                                                 (GHC.List.init1
                                                    @ GHC.Types.Char
                                                    ipv
                                                    (GHC.Types.[] @ GHC.Types.Char))
                                                 (GHC.Types.: @ GHC.Types.Char w ipv1) } }
                                  GHC.Types.True
                                  -> case GHC.List.init2 ret_ty [GHC.Types.Char] of {} } })
                               ds1) }
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 0#) of wild1 {
                   GHC.Types.False
                   -> case w1 of wild {
                        []
                        -> $j
                             (GHC.Types.[] @ GHC.Base.String)
                             (GHC.Types.[] @ GHC.Base.String)
                        : ipv ipv1
                        -> case ww of ds1 {
                             DEFAULT
                             -> let {
                                  ds2 :: ([GHC.Base.String], [GHC.Base.String])
                                  = case GHC.List.splitAt_$s$wsplitAt'
                                           @ GHC.Base.String
                                           ipv1
                                           (GHC.Prim.-# ds1 1#) of ww1 { (#,#) ww2 ww3 ->
                                    (ww2, ww3) }
                                } in
                                $j
                                  (GHC.Types.:
                                     @ GHC.Base.String
                                     ipv
                                     (case ds2 of wild2 { (,) xs' xs'' -> xs' }))
                                  (case ds2 of wild2 { (,) xs' xs'' -> xs'' })
                             1#
                             -> $j
                                  (GHC.Types.:
                                     @ GHC.Base.String
                                     ipv
                                     (GHC.Types.[] @ GHC.Base.String))
                                  ipv1 } }
                   GHC.Types.True -> $j (GHC.Types.[] @ GHC.Base.String) w1 }) -}
7f3ad765e1dc53fd0e2c885971a5317a
  $wfindWinner ::
    Data.Set.Base.Set (GHC.Types.Int, GHC.Types.Char)
    -> GHC.Prim.Int# -> GHC.Base.Maybe GHC.Types.Char
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Set.Base.Set
                           (GHC.Types.Int, GHC.Types.Char))
                   (ww :: GHC.Prim.Int#) ->
                 case Lib.$wgo5
                        Lib.findWinner2
                        Lib.findWinner1
                        w of ww1 { (#,#) ww2 ww3 ->
                 case ww2 of wild { GHC.Types.I# x ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# x ww) of wild1 {
                   GHC.Types.False -> GHC.Base.Just @ GHC.Types.Char ww3
                   GHC.Types.True -> GHC.Base.Nothing @ GHC.Types.Char } } }) -}
579ee8529bb65dd40a50b9fb1c721b9d
  $wgo :: [GHC.Types.Char] -> GHC.Prim.Int# -> GHC.Prim.Int#
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>, Inline: [0] -}
3412cd79746c4aec8ca418354d8ac40f
  $wgo5 ::
    GHC.Types.Int
    -> GHC.Types.Char
    -> Data.Set.Base.Set (GHC.Types.Int, GHC.Types.Char)
    -> (# GHC.Types.Int, GHC.Types.Char #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><S,1*U>,
     Inline: [0] -}
443029d0afbcd255638f9918b1d9dca3
  $wmkGrid :: GHC.Types.Int -> GHC.Prim.Int# -> [[GHC.Types.Char]]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><S,U>,
     Inline: [0],
     Unfolding: (\ (w :: GHC.Types.Int) (ww :: GHC.Prim.Int#) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# 0# ww) of wild {
                   GHC.Types.False -> GHC.Types.[] @ [GHC.Types.Char]
                   GHC.Types.True
                   -> let {
                        x :: [GHC.Types.Char]
                        = case w of wild1 { GHC.Types.I# y ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.<# 0# y) of wild2 {
                            GHC.Types.False -> GHC.Types.[] @ GHC.Types.Char
                            GHC.Types.True -> Lib.$wxs1 y } }
                      } in
                      let {
                        lvl10 :: [[GHC.Types.Char]]
                        = GHC.Types.:
                            @ [GHC.Types.Char]
                            x
                            (GHC.Types.[] @ [GHC.Types.Char])
                      } in
                      letrec {
                        $wxs3 :: GHC.Prim.Int# -> [[GHC.Types.Char]]
                          {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
                        = \ (ww1 :: GHC.Prim.Int#) ->
                          case ww1 of ds1 {
                            DEFAULT
                            -> GHC.Types.: @ [GHC.Types.Char] x ($wxs3 (GHC.Prim.-# ds1 1#))
                            1# -> lvl10 }
                      } in
                      $wxs3 ww }) -}
6827255c24c25a2c7570606f7adaa63a
  $wxs :: GHC.Prim.Int# -> [GHC.Types.Char]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
209e79e4c30bb9945197eb198b40f712
  $wxs1 :: GHC.Prim.Int# -> [GHC.Types.Char]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
08c4cdb1132618fa6d9cc55b3d6365fa
  concatGrid :: Types.Grid -> GHC.Base.String
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (grid :: Types.Grid) ->
                 case GHC.Base.++
                        @ [GHC.Types.Char]
                        (Data.OldList.transpose @ GHC.Types.Char grid)
                        (GHC.Types.:
                           @ [GHC.Types.Char]
                           (case GHC.List.$wlenAcc
                                   @ [GHC.Types.Char]
                                   grid
                                   0# of ww2 { DEFAULT ->
                            case GHC.Prim.tagToEnum#
                                   @ GHC.Types.Bool
                                   (GHC.Prim.># 1# ww2) of wild {
                              GHC.Types.False
                              -> letrec {
                                   go1 :: GHC.Prim.Int# -> [GHC.Types.Char]
                                     {- Arity: 1, Strictness: <L,U> -}
                                   = \ (x :: GHC.Prim.Int#) ->
                                     GHC.Types.:
                                       @ GHC.Types.Char
                                       Lib.concatGrid3
                                       (case GHC.Show.$wshowSignedInt
                                               0#
                                               x
                                               (GHC.Types.[]
                                                  @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                        GHC.Base.++
                                          @ GHC.Types.Char
                                          (GHC.Types.: @ GHC.Types.Char ww5 ww6)
                                          (case GHC.Prim.tagToEnum#
                                                  @ GHC.Types.Bool
                                                  (GHC.Prim.==# x ww2) of wild1 {
                                             GHC.Types.False -> go1 (GHC.Prim.+# x 1#)
                                             GHC.Types.True -> GHC.Types.[] @ GHC.Types.Char }) })
                                 } in
                                 case go1 1# of wild1 {
                                   [] -> Lib.concatGrid2
                                   : ds1 xs
                                   -> GHC.List.filter @ GHC.Types.Char GHC.Unicode.isAlphaNum xs }
                              GHC.Types.True -> Lib.concatGrid2 } })
                           (GHC.Types.:
                              @ [GHC.Types.Char]
                              (case GHC.List.$wlenAcc
                                      @ [GHC.Types.Char]
                                      grid
                                      0# of ww2 { DEFAULT ->
                               case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.<# 0# ww2) of wild {
                                 GHC.Types.False -> GHC.Types.[] @ GHC.Types.Char
                                 GHC.Types.True -> Lib.$wxs ww2 } })
                              (GHC.Types.[] @ [GHC.Types.Char]))) of wild {
                   [] -> GHC.Types.[] @ GHC.Types.Char
                   : x xs1
                   -> Data.OldList.intercalate_$spoly_go
                        @ GHC.Types.Char
                        x
                        (Data.OldList.prependToAll
                           @ [GHC.Types.Char]
                           Lib.concatGrid1
                           xs1) }) -}
e8d0fae3378765309a76a54ba2534e00
  concatGrid1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "\n"#) -}
92a660c09de27d74940c33b57a547741
  concatGrid2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.List.filter
                   @ GHC.Types.Char
                   GHC.Unicode.isAlphaNum
                   (GHC.Types.[] @ GHC.Types.Char)) -}
b16ad668f9faeb896998232fec3cd305
  concatGrid3 :: GHC.Types.Char
  {- HasNoCafRefs, Unfolding: (GHC.Types.C# ' '#) -}
e20f7254c7e841e5e5135f7209e3aa2d
  dropToken ::
    GHC.Types.Char -> GHC.Types.Int -> Types.Grid -> Types.Grid
  {- Arity: 3, Strictness: <L,U><S(S),1*U(U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Char)
                   (w1 :: GHC.Types.Int)
                   (w2 :: Types.Grid) ->
                 case w1 of ww { GHC.Types.I# ww1 -> Lib.$wdropToken w ww1 w2 }) -}
eeff29bbe3932e8111672a1630da3940
  endGame :: GHC.Types.Char -> Types.Game -> GHC.Types.IO ()
  {- Arity: 3, Strictness: <L,U(U)><L,1*U(1*U,A,A)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.endGame1
                  `cast`
                (<GHC.Types.Char>_R
                 ->_R <Types.Game>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
16a17377b8d492f985251a67fd8140a7
  endGame1 ::
    GHC.Types.Char
    -> Types.Game
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,U(U)><L,1*U(1*U,A,A)><S,U>,
     Unfolding: (\ (token :: GHC.Types.Char)
                   (game :: Types.Game)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Lib.endGame15 eta of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Lib.endGame14
                        GHC.Types.False
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Lib.endGame9
                        GHC.Types.False
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 let {
                   players :: [Types.Player]
                   = case game of wild { Types.Game ds4 ds5 ds6 -> ds4 }
                 } in
                 let {
                   c :: GHC.Types.Char
                        -> GHC.Types.IO ()
                        -> GHC.Prim.State# GHC.Prim.RealWorld
                        -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     {- Arity: 3, Strictness: <L,U(U)><L,1*C1(U(U,U))><S,U>,
                        Unfolding: InlineRule (3, True, False)
                                   (\ (x :: GHC.Types.Char)
                                      (eta1 :: GHC.Types.IO ())[OneShot]
                                      (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                    case Lib.endGame4 players x eta2 of ds4 { (#,#) ipv6 ipv7 ->
                                    eta1 `cast` (GHC.Types.N:IO[0] <()>_R) ipv6 }) -}
                   = \ (x :: GHC.Types.Char)
                       (eta1 :: GHC.Types.IO ())[OneShot]
                       (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                     case Lib.endGame4 players x eta2 of ds4 { (#,#) ipv6 ipv7 ->
                     eta1 `cast` (GHC.Types.N:IO[0] <()>_R) ipv6 }
                 } in
                 case (GHC.CString.unpackFoldrCString#
                         @ (GHC.Types.IO ())
                         "player "#
                         c `cast`
                         (<GHC.Types.Char>_R
                          ->_R <GHC.Types.IO ()>_R
                          ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                         (\ (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                          case Lib.endGame4 players token eta1 of ds4 { (#,#) ipv6 ipv7 ->
                          (GHC.CString.unpackFoldrCString#
                             @ (GHC.Types.IO ())
                             "\n"#
                             c `cast`
                             (<GHC.Types.Char>_R
                              ->_R <GHC.Types.IO ()>_R
                              ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                             Lib.endGame3 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)))
                            `cast`
                          (GHC.Types.N:IO[0] <()>_R)
                            ipv6 })
                           `cast`
                         (Sym (GHC.Types.N:IO[0] <()>_R)))
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   Lib.endGame2
                   GHC.Types.False
                   ipv6 } } } }) -}
1abcc9b42643a7d0847180643282a8b4
  endGame10 :: [GHC.Types.Int]
  {- Unfolding: (GHC.Base.map
                   @ System.Console.ANSI.Common.SGR
                   @ GHC.Types.Int
                   System.Console.ANSI.Unix.sgrToCode
                   Lib.endGame11) -}
f579cc1c8343f2c6b856df406477b347
  endGame11 :: [System.Console.ANSI.Common.SGR]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ System.Console.ANSI.Common.SGR
                   Lib.endGame13
                   Lib.endGame12) -}
544216ef4e8b7739045612a280c94d72
  endGame12 :: [System.Console.ANSI.Common.SGR]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ System.Console.ANSI.Common.SGR
                   Lib.endGame8
                   (GHC.Types.[] @ System.Console.ANSI.Common.SGR)) -}
85f76829cf0d42f5322f424940ddeeb1
  endGame13 :: System.Console.ANSI.Common.SGR
  {- HasNoCafRefs, Strictness: m4,
     Unfolding: (System.Console.ANSI.Common.SetUnderlining
                   System.Console.ANSI.Common.SingleUnderline) -}
bbced7d32e612e1828f7dc7476ebe2db
  endGame14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# " ... winner is "#) -}
015f1c173abbecb8610a6317ee9bbf6f
  endGame15 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Lib.endGame17
                        GHC.Types.False
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Lib.endGame16
                        GHC.Types.False
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   Lib.endGame2
                   GHC.Types.False
                   ipv2 } }) -}
febead638c7b323f2ac855b692014992
  endGame16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Game Over!"#) -}
968655fb4d418c1495f2ca3d7c9f2add
  endGame17 :: GHC.Base.String
  {- Unfolding: (System.Console.ANSI.Unix.csi
                   Lib.endGame18
                   System.Console.ANSI.Unix.setSGRCode1) -}
eaddbfb2a40d56b49ca1a5fcc3efa147
  endGame18 :: [GHC.Types.Int]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Lib.endGame7
                   Lib.endGame19) -}
31f1f3462f4bfd20100903a8c5b93aff
  endGame19 :: [GHC.Types.Int]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Lib.endGame20
                   (GHC.Types.[] @ GHC.Types.Int)) -}
0c83c14ac56dd3837b72f720bbe2abc4
  endGame2 :: GHC.Base.String
  {- Unfolding: (System.Console.ANSI.Unix.csi
                   (GHC.Types.[] @ GHC.Types.Int)
                   System.Console.ANSI.Unix.setSGRCode1) -}
4613eaffa53e1df752bfa84a928027ba
  endGame20 :: GHC.Types.Int
  {- Unfolding: (case System.Console.ANSI.Unix.$wsgrToCode
                        Lib.endGame21 of ww { DEFAULT ->
                 GHC.Types.I# ww }) -}
1c01bf608554f68c9f0e4f1312d43f16
  endGame21 :: System.Console.ANSI.Common.SGR
  {- HasNoCafRefs,
     Unfolding: (System.Console.ANSI.Common.SetColor
                   System.Console.ANSI.Common.Foreground
                   System.Console.ANSI.Common.Vivid
                   System.Console.ANSI.Common.Blue) -}
52406e9e7c71dc923864d02f42a853a0
  endGame3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# s, GHC.Tuple.() #)) -}
51599e287eca15d592946cc75b42575a
  endGame4 ::
    [Types.Player]
    -> GHC.Types.Char
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,U><L,U(U)><S,U>,
     Unfolding: (\ (players :: [Types.Player])
                   (x :: GHC.Types.Char)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Lib.endGame5
                        GHC.Types.False
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.List.elem
                        @ GHC.Types.Char
                        GHC.Classes.$fEqChar
                        x
                        (GHC.Base.map
                           @ Types.Player
                           @ GHC.Types.Char
                           Types.token
                           players) of wild {
                   GHC.Types.False
                   -> GHC.IO.Handle.Text.hPutChar1 GHC.IO.Handle.FD.stdout x ipv
                   GHC.Types.True
                   -> case GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             (System.Console.ANSI.Unix.csi
                                (GHC.Types.:
                                   @ GHC.Types.Int
                                   (case System.Console.ANSI.Unix.$wsgrToCode
                                           (System.Console.ANSI.Common.SetColor
                                              System.Console.ANSI.Common.Foreground
                                              System.Console.ANSI.Common.Vivid
                                              (letrec {
                                                 $wgo1 :: [Types.Player]
                                                          -> (# GHC.Types.Char,
                                                                System.Console.ANSI.Common.Color #)
                                                   {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
                                                 = \ (w :: [Types.Player]) ->
                                                   case w of wild1 {
                                                     []
                                                     -> case GHC.List.badHead
                                                        ret_ty (# GHC.Types.Char,
                                                                  System.Console.ANSI.Common.Color #)
                                                        of {}
                                                     : y ys
                                                     -> case y of wild2 { Types.Player ds2 ds3 ->
                                                        case ds2 of wild3 { GHC.Types.C# x1 ->
                                                        case x of wild4 { GHC.Types.C# y1 ->
                                                        case GHC.Prim.tagToEnum#
                                                               @ GHC.Types.Bool
                                                               (GHC.Prim.eqChar# x1 y1) of wild5 {
                                                          GHC.Types.False -> $wgo1 ys
                                                          GHC.Types.True
                                                          -> (# wild3, ds3 #) } } } } }
                                               } in
                                               case $wgo1 players of ww { (#,#) ww1 ww2 ->
                                               ww2 })) of ww { DEFAULT ->
                                    GHC.Types.I# ww })
                                   (GHC.Types.[] @ GHC.Types.Int))
                                System.Console.ANSI.Unix.setSGRCode1)
                             GHC.Types.False
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      case x of ww { GHC.Types.C# ww1 ->
                      case GHC.IO.Handle.Text.$whPutChar
                             GHC.IO.Handle.FD.stdout
                             ww1
                             ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                      GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Lib.endGame2
                        GHC.Types.False
                        ipv4 } } } } }) -}
8a7bd2b89770ab7afb7fbd8c19fe0057
  endGame5 :: GHC.Base.String
  {- Unfolding: (System.Console.ANSI.Unix.csi
                   Lib.endGame6
                   System.Console.ANSI.Unix.setSGRCode1) -}
5db6b581df3d0f26ac5f88f574059cac
  endGame6 :: [GHC.Types.Int]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Lib.endGame7
                   (GHC.Types.[] @ GHC.Types.Int)) -}
ca60a24db27cab2ed36869e94308d3da
  endGame7 :: GHC.Types.Int
  {- Unfolding: (case System.Console.ANSI.Unix.$wsgrToCode
                        Lib.endGame8 of ww { DEFAULT ->
                 GHC.Types.I# ww }) -}
a943c95705256a06374f81b615c00c73
  endGame8 :: System.Console.ANSI.Common.SGR
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (System.Console.ANSI.Common.SetConsoleIntensity
                   System.Console.ANSI.Common.BoldIntensity) -}
f11e2b4a38cf5c95f95f4dceb5e303cc
  endGame9 :: GHC.Base.String
  {- Unfolding: (System.Console.ANSI.Unix.csi
                   Lib.endGame10
                   System.Console.ANSI.Unix.setSGRCode1) -}
d94a323d75edc1ef179f6d9fbc009856
  findWinner ::
    Data.Set.Base.Set (GHC.Types.Int, GHC.Types.Char)
    -> GHC.Types.Int -> GHC.Base.Maybe GHC.Types.Char
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S(S),1*U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Data.Set.Base.Set (GHC.Types.Int, GHC.Types.Char))
                   (w1 :: GHC.Types.Int) ->
                 case w1 of ww { GHC.Types.I# ww1 -> Lib.$wfindWinner w ww1 }) -}
d4c3650c93459b7c79270d43df766a59
  findWinner1 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# 'X'#) -}
058159420cec6782cc219f561efdecb4
  findWinner2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
6a190ca1427198f0c067b6a6a672647a
  getChoiceOf ::
    Types.Grid
    -> Types.Player
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.IO GHC.Types.Int
  {- Arity: 5,
     Strictness: <L,U><L,U(U(U),U)><L,1*U(U)><L,1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.getChoiceOf1
                  `cast`
                (<Types.Grid>_R
                 ->_R <Types.Player>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Int>_R)) -}
dd9ae6a88cb12919ae1ce4cb256df1b5
  getChoiceOf1 ::
    Types.Grid
    -> Types.Player
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Int #)
  {- Arity: 5,
     Strictness: <L,U><L,U(U(U),U)><L,1*U(U)><L,1*U(U)><S,U> -}
c2bb20251523c407a12c1fbdd354fc2b
  mkGrid :: GHC.Types.Int -> GHC.Types.Int -> Types.Grid
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><S(S),1*U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: GHC.Types.Int) ->
                 case w1 of ww { GHC.Types.I# ww1 -> Lib.$wmkGrid w ww1 }) -}
a52b69b9ea2f5d2442f99b7a8626d20f
  playWith :: Types.Game -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <L,U(U,U,U(U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.playWith1
                  `cast`
                (<Types.Game>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
5c6dabf265ebf9b7cc129a7bf8b8edb6
  playWith1 ::
    Types.Game
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,U(U,U,U(U))><S,U> -}
fe6b7646598b803b9198936b2fcf4e7c
  printAllToken ::
    [Types.Player] -> GHC.Base.String -> GHC.Types.IO ()
  {- Arity: 3, Strictness: <L,U><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.printAllToken1
                  `cast`
                (<[Types.Player]>_R
                 ->_R <[GHC.Types.Char]>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
5878dcab1555f89a3abc005336faf442
  printAllToken1 ::
    [Types.Player]
    -> [GHC.Types.Char]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,U><S,1*U><S,U>,
     Unfolding: (\ (players :: [Types.Player])
                   (eta :: [GHC.Types.Char])
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 letrec {
                   go1 :: [GHC.Types.Char]
                          -> GHC.Prim.State# GHC.Prim.RealWorld
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     {- Arity: 2, Strictness: <S,1*U><S,U> -}
                   = \ (ds :: [GHC.Types.Char])
                       (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                     case ds of wild {
                       [] -> (# eta2, GHC.Tuple.() #)
                       : y ys
                       -> case Lib.endGame4 players y eta2 of ds1 { (#,#) ipv ipv1 ->
                          go1 ys ipv } }
                 } in
                 go1 eta eta1) -}
3e277aa6ecca98bd3576c71b71a96cfc
  printToken :: [Types.Player] -> GHC.Types.Char -> GHC.Types.IO ()
  {- Arity: 3, Strictness: <L,U><L,U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.endGame4
                  `cast`
                (<[Types.Player]>_R
                 ->_R <GHC.Types.Char>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
770406c9af774a4a2a39acbab014f5ac
  rollDice :: GHC.Types.IO GHC.Types.Int
  {- Arity: 1, Strictness: <S,U>m,
     Unfolding: InlineRule (0, True, True)
                Lib.rollDice1 `cast` (Sym (GHC.Types.N:IO[0] <GHC.Types.Int>_R)) -}
ebec3f9e8ff10818532e02be34351665
  rollDice1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Int #)
  {- Arity: 1, Strictness: <S,U>m,
     Unfolding: (\ (eta :: GHC.Prim.State#
                             GHC.Prim.RealWorld)[OneShot] ->
                 case System.Random.theStdGen
                        `cast`
                      (GHC.IORef.N:IORef[0] <System.Random.StdGen>_N) of wild { GHC.STRef.STRef r# ->
                 case GHC.Prim.atomicModifyMutVar#
                        @ GHC.Prim.RealWorld
                        @ System.Random.StdGen
                        @ (System.Random.StdGen, GHC.Types.Int)
                        @ GHC.Types.Int
                        r#
                        Lib.rollDice2
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of b1 { GHC.Types.I# ipv2 -> ds1 } } }) -}
2857e3a819bbce374163cae146d04c39
  rollDice2 ::
    System.Random.StdGen -> (System.Random.StdGen, GHC.Types.Int)
  {- Arity: 1,
     Unfolding: (\ (a1 :: System.Random.StdGen) ->
                 case System.Random.$wrandomIvalInteger
                        @ System.Random.StdGen
                        @ GHC.Types.Int
                        System.Random.$fRandomGenStdGen
                        GHC.Num.$fNumInt
                        Lib.rollDice_w2
                        Lib.rollDice_w1
                        a1 of ww2 { (#,#) ww3 ww4 ->
                 case ww4 of a'1 { System.Random.StdGen ipv ipv1 ->
                 (a'1, ww3) } }) -}
0a21220b4378760cdd24bbe132d7f6d3
  rollDice3 :: [[System.Console.ANSI.Common.Color]]
  {- Unfolding: (GHC.Types.:
                   @ [System.Console.ANSI.Common.Color]
                   Lib.rollDice_xs0
                   Lib.rollDice4) -}
fe238c91cf810c292320eb35b4ceb796
  rollDice4 :: [[System.Console.ANSI.Common.Color]]
  {- Unfolding: (Data.OldList.permutations1
                   @ System.Console.ANSI.Common.Color
                   Lib.rollDice_xs0
                   (GHC.Types.[] @ System.Console.ANSI.Common.Color)) -}
a4b307f2800eb7c40fd52e80c115bd61
  rollDice5 :: [System.Console.ANSI.Common.Color]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ System.Console.ANSI.Common.Color
                   System.Console.ANSI.Common.Cyan
                   Lib.rollDice6) -}
4e9193698a2530b4b84671f7b32948e0
  rollDice6 :: [System.Console.ANSI.Common.Color]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ System.Console.ANSI.Common.Color
                   System.Console.ANSI.Common.Blue
                   Lib.rollDice7) -}
f75c80f906238c027a40f729b6949aee
  rollDice7 :: [System.Console.ANSI.Common.Color]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ System.Console.ANSI.Common.Color
                   System.Console.ANSI.Common.Green
                   Lib.rollDice8) -}
f41708ed8edceaffefd533d8d3c6391b
  rollDice8 :: [System.Console.ANSI.Common.Color]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ System.Console.ANSI.Common.Color
                   System.Console.ANSI.Common.Magenta
                   Lib.rollDice9) -}
c5835055d5fe07247b05c9fa02317b72
  rollDice9 :: [System.Console.ANSI.Common.Color]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ System.Console.ANSI.Common.Color
                   System.Console.ANSI.Common.Red
                   (GHC.Types.[] @ System.Console.ANSI.Common.Color)) -}
f27e0db6c680602f01f575838e90b2e4
  rollDice_w1 :: GHC.Integer.Type.Integer
  {- Unfolding: (case Lib.rollDice_ww2 of wild { GHC.Types.I# i ->
                 GHC.Integer.Type.smallInteger i }) -}
37d4cec766ffdb89e8150876aafc311e
  rollDice_w2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
15c6323a8b348acb918d16738407e2b6
  rollDice_ww2 :: GHC.Types.Int
  {- Unfolding: (case GHC.List.$wlenAcc
                        @ [System.Console.ANSI.Common.Color]
                        Lib.rollDice3
                        0# of ww2 { DEFAULT ->
                 GHC.Types.I# ww2 }) -}
6e118d7ae7c47377b63f05b807d058a2
  rollDice_xs0 :: [System.Console.ANSI.Common.Color]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ System.Console.ANSI.Common.Color
                   System.Console.ANSI.Common.Yellow
                   Lib.rollDice5) -}
495677e786c73450cbc0f0fb6636f9a8
  showGrid :: Types.Game -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <L,U(U,U,A)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.showGrid1
                  `cast`
                (<Types.Game>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
d35571f7758a32b102a7be302cfe6d9a
  showGrid1 ::
    Types.Game
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,U(U,U,A)><S,U> -}
13c2206544671d49f6aec10539ae8b2a
  theme :: GHC.Types.Int -> [System.Console.ANSI.Common.Color]
  {- Arity: 1, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Types.Int) ->
                 GHC.List.!! @ [System.Console.ANSI.Common.Color] Lib.theme1 x) -}
3c178985062552909778b97cbb6ccb98
  theme1 :: [[System.Console.ANSI.Common.Color]]
  {- Unfolding: (Data.OldList.nubBy
                   @ [System.Console.ANSI.Common.Color]
                   Lib.theme2
                   Lib.rollDice3) -}
b7b809845583d2332156ff4d623f54c7
  theme2 ::
    [System.Console.ANSI.Common.Color]
    -> [System.Console.ANSI.Common.Color] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (GHC.Classes.$fEq[]_$c==
                   @ System.Console.ANSI.Common.Color
                   System.Console.ANSI.Common.$fEqColor) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

