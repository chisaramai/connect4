
==================== FINAL INTERFACE ====================
2016-10-26 23:41:04.79082 UTC

interface connect4-0.1.0.0-72dbdpWjjZ73fXhjRJQRqF:Lib 8001
  interface hash: e709e331239bb0d8169423c554ca0f0d
  ABI hash: 5394ecf7cef126423c9a6052894208db
  export-list hash: b9c108d982d5f246715d9aea31d1c1d9
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: b159a15c55fa7c6870cb2eb79bbae5a5
  sig of: Nothing
  used TH splices: False
  where
exports:
  Lib.getChoice
  Lib.showGrid
module dependencies:
package dependencies: base-4.9.0.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:Data.Char eb33dc25ecb52d018a0ca26590e2b50b
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:Data.List 49b86831b79b49ce5d4d9416ecba61df
import  -/  base-4.9.0.0:Data.OldList 0058409f994fb13ae0616e3f1e5b4dae
import  -/  base-4.9.0.0:Data.Tuple acb0ed10307ed88df6c81b8589f4de16
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.IO.Handle a1938753d58593f0a419f85b67aa7cd3
import  -/  base-4.9.0.0:GHC.IO.Handle.FD adf0145182d1c6eb38b2b8ce5a292e84
import  -/  base-4.9.0.0:GHC.IO.Handle.Types a94506fe2fe805a97a84bccd65c71eb8
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:GHC.Num 48f506a8f4ecf06285d0a0706594dcc0
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:GHC.Unicode 2343b0871604cc5116abba8f24d75b42
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  base-4.9.0.0:System.Environment ee0914a962f5508d0fd404c89ee4999b
import  -/  base-4.9.0.0:System.IO eb1d40aa793a4047069a5023f2ebcfe3
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
ba7abff4b36cc4114f7d9c0b86e5aa72
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Lib.$trModule2 Lib.$trModule1) -}
af70d3649cdf93b4cff1bcdeb92d12c8
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Lib"#) -}
3d36709ee4c7dbf3289ce754d64761b7
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "connect4-0.1.0.0-72dbdpWjjZ73fXhjRJQRqF"#) -}
5a2a969f5e8425ecff1fabea3a76bfa5
  getChoice :: GHC.Types.IO GHC.Base.String
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.getChoice1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R)) -}
3e4ad53bc775510d1ce5f3ab3b163126
  getChoice1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.hSetBuffering1
                        GHC.IO.Handle.FD.stdout
                        GHC.IO.Handle.Types.NoBuffering
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Lib.getChoice2
                        GHC.Types.False
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 GHC.IO.Handle.Internals.wantReadableHandle_1
                   @ GHC.Base.String
                   GHC.IO.Handle.Text.hGetLine4
                   GHC.IO.Handle.FD.stdin
                   GHC.IO.Handle.Text.hGetLine2
                     `cast`
                   (<GHC.IO.Handle.Types.Handle__>_R
                    ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R))
                   ipv2 } }) -}
64db7c6e32aadf8391534f0283223328
  getChoice2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Choose column: "#) -}
8c305040976d643b8c7feb019ea9fbf6
  showGrid :: [[GHC.Types.Char]] -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.showGrid1
                  `cast`
                (<[[GHC.Types.Char]]>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
7bc1b07fc389cedb831b7b1df20a5f84
  showGrid1 ::
    [[GHC.Types.Char]]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: (\ (grid :: [[GHC.Types.Char]])
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   (case GHC.Base.++
                           @ [GHC.Types.Char]
                           (Data.OldList.transpose @ GHC.Types.Char grid)
                           (GHC.Types.:
                              @ [GHC.Types.Char]
                              (case GHC.List.$wlenAcc
                                      @ [GHC.Types.Char]
                                      grid
                                      0# of ww2 { DEFAULT ->
                               case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.># 1# ww2) of wild {
                                 GHC.Types.False
                                 -> letrec {
                                      go :: GHC.Prim.Int# -> [GHC.Types.Char]
                                        {- Arity: 1, Strictness: <L,U> -}
                                      = \ (x :: GHC.Prim.Int#) ->
                                        GHC.Types.:
                                          @ GHC.Types.Char
                                          Lib.showGrid4
                                          (case GHC.Show.$wshowSignedInt
                                                  0#
                                                  x
                                                  (GHC.Types.[]
                                                     @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                           GHC.Base.++
                                             @ GHC.Types.Char
                                             (GHC.Types.: @ GHC.Types.Char ww5 ww6)
                                             (case GHC.Prim.tagToEnum#
                                                     @ GHC.Types.Bool
                                                     (GHC.Prim.==# x ww2) of wild1 {
                                                GHC.Types.False -> go (GHC.Prim.+# x 1#)
                                                GHC.Types.True
                                                -> GHC.Types.[] @ GHC.Types.Char }) })
                                    } in
                                    case go 1# of wild1 {
                                      [] -> Lib.showGrid3
                                      : ds1 xs
                                      -> GHC.List.filter
                                           @ GHC.Types.Char
                                           GHC.Unicode.isAlphaNum
                                           xs }
                                 GHC.Types.True -> Lib.showGrid3 } })
                              (GHC.Types.[] @ [GHC.Types.Char])) of wild {
                      [] -> GHC.Types.[] @ GHC.Types.Char
                      : x xs1
                      -> Data.OldList.intercalate_$spoly_go
                           @ GHC.Types.Char
                           x
                           (Data.OldList.prependToAll @ [GHC.Types.Char] Lib.showGrid2 xs1) })
                   GHC.Types.True
                   eta) -}
105ee446e76b2aa0c97cfeea79c8d351
  showGrid2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "\n"#) -}
04e2ad8cded734ce31928764e242ae89
  showGrid3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.List.filter
                   @ GHC.Types.Char
                   GHC.Unicode.isAlphaNum
                   (GHC.Types.[] @ GHC.Types.Char)) -}
a4ffee048d7c73848325fe99f9006351
  showGrid4 :: GHC.Types.Char
  {- HasNoCafRefs, Unfolding: (GHC.Types.C# ' '#) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

