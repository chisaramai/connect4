
==================== FINAL INTERFACE ====================
2016-10-28 15:23:15.409703 UTC

interface connect4-0.1.0.0-72dbdpWjjZ73fXhjRJQRqF:Lib 8001
  interface hash: 79c819ceccc7644ab75ecfce6b9a963e
  ABI hash: cf687866252b3c0a2f333e8c68bef95b
  export-list hash: 00dd879d6167d67267fa366ea81f15f8
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: b159a15c55fa7c6870cb2eb79bbae5a5
  sig of: Nothing
  used TH splices: False
  where
exports:
  Lib.dropToken
  Lib.getChoice
  Lib.playWith
  Lib.showGrid
module dependencies:
package dependencies: base-4.9.0.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:Data.Char eb33dc25ecb52d018a0ca26590e2b50b
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:Data.List 49b86831b79b49ce5d4d9416ecba61df
import  -/  base-4.9.0.0:Data.OldList 0058409f994fb13ae0616e3f1e5b4dae
import  -/  base-4.9.0.0:Data.Tuple acb0ed10307ed88df6c81b8589f4de16
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.IO.Handle a1938753d58593f0a419f85b67aa7cd3
import  -/  base-4.9.0.0:GHC.IO.Handle.FD adf0145182d1c6eb38b2b8ce5a292e84
import  -/  base-4.9.0.0:GHC.IO.Handle.Types a94506fe2fe805a97a84bccd65c71eb8
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:GHC.Num 48f506a8f4ecf06285d0a0706594dcc0
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:GHC.Unicode 2343b0871604cc5116abba8f24d75b42
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  base-4.9.0.0:System.Environment ee0914a962f5508d0fd404c89ee4999b
import  -/  base-4.9.0.0:System.IO eb1d40aa793a4047069a5023f2ebcfe3
import  -/  base-4.9.0.0:Text.Read 9c1be14f7e5eac8b18bcb566c5763677
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
ba7abff4b36cc4114f7d9c0b86e5aa72
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Lib.$trModule2 Lib.$trModule1) -}
af70d3649cdf93b4cff1bcdeb92d12c8
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Lib"#) -}
3d36709ee4c7dbf3289ce754d64761b7
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "connect4-0.1.0.0-72dbdpWjjZ73fXhjRJQRqF"#) -}
577129bb7f39829a95723da13d1c8bcd
  $wdropToken ::
    GHC.Types.Char
    -> GHC.Prim.Int# -> [[GHC.Types.Char]] -> [[GHC.Types.Char]]
  {- Arity: 3, Strictness: <L,U><S,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Types.Char)
                   (ww :: GHC.Prim.Int#)
                   (w1 :: [[GHC.Types.Char]]) ->
                 let {
                   $j :: [[GHC.Types.Char]]
                         -> [[GHC.Types.Char]] -> [[GHC.Types.Char]]
                     {- Arity: 2, Strictness: <S,1*U><L,U> -}
                   = \ (x1 :: [[GHC.Types.Char]])[OneShot]
                       (ds1 :: [[GHC.Types.Char]])[OneShot] ->
                     case x1 of wild {
                       [] -> case GHC.List.init2 ret_ty [[GHC.Types.Char]] of {}
                       : x2 xs
                       -> GHC.Base.++
                            @ [GHC.Types.Char]
                            (GHC.List.init1 @ [GHC.Types.Char] x2 xs)
                            (GHC.Types.:
                               @ [GHC.Types.Char]
                               (let {
                                  originalColumn :: [GHC.Types.Char]
                                  = GHC.List.$w!! @ [GHC.Types.Char] w1 (GHC.Prim.-# ww 1#)
                                } in
                                case Lib.$wgo originalColumn 0# of ww1 { DEFAULT ->
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.<=# ww1 0#) of wild1 {
                                  GHC.Types.False
                                  -> case originalColumn of wild2 {
                                       [] -> case GHC.List.init2 ret_ty [GHC.Types.Char] of {}
                                       : ipv ipv1
                                       -> case ww1 of ds2 {
                                            DEFAULT
                                            -> case GHC.List.splitAt_$s$wsplitAt'
                                                      @ GHC.Types.Char
                                                      ipv1
                                                      (GHC.Prim.-# ds2 1#) of ww2 { (#,#) ww3 ww4 ->
                                               GHC.Base.++
                                                 @ GHC.Types.Char
                                                 (GHC.List.init1 @ GHC.Types.Char ipv ww3)
                                                 (GHC.Types.: @ GHC.Types.Char w ww4) }
                                            1#
                                            -> GHC.Base.++
                                                 @ GHC.Types.Char
                                                 (GHC.List.init1
                                                    @ GHC.Types.Char
                                                    ipv
                                                    (GHC.Types.[] @ GHC.Types.Char))
                                                 (GHC.Types.: @ GHC.Types.Char w ipv1) } }
                                  GHC.Types.True
                                  -> case GHC.List.init2 ret_ty [GHC.Types.Char] of {} } })
                               ds1) }
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 0#) of wild1 {
                   GHC.Types.False
                   -> case w1 of wild {
                        []
                        -> $j
                             (GHC.Types.[] @ [GHC.Types.Char])
                             (GHC.Types.[] @ [GHC.Types.Char])
                        : ipv ipv1
                        -> case ww of ds1 {
                             DEFAULT
                             -> let {
                                  ds2 :: ([[GHC.Types.Char]], [[GHC.Types.Char]])
                                  = case GHC.List.splitAt_$s$wsplitAt'
                                           @ [GHC.Types.Char]
                                           ipv1
                                           (GHC.Prim.-# ds1 1#) of ww1 { (#,#) ww2 ww3 ->
                                    (ww2, ww3) }
                                } in
                                $j
                                  (GHC.Types.:
                                     @ [GHC.Types.Char]
                                     ipv
                                     (case ds2 of wild2 { (,) xs' xs'' -> xs' }))
                                  (case ds2 of wild2 { (,) xs' xs'' -> xs'' })
                             1#
                             -> $j
                                  (GHC.Types.:
                                     @ [GHC.Types.Char]
                                     ipv
                                     (GHC.Types.[] @ [GHC.Types.Char]))
                                  ipv1 } }
                   GHC.Types.True -> $j (GHC.Types.[] @ [GHC.Types.Char]) w1 }) -}
420bc75b154b0b2eb279095ffcc2d268
  $wgo :: [GHC.Types.Char] -> GHC.Prim.Int# -> GHC.Prim.Int#
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>, Inline: [0] -}
43f4838a92ab0cea0772747477b53bb0
  $wxs :: GHC.Prim.Int# -> (# GHC.Types.Char, [GHC.Types.Char] #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
7d6f577614929fc9cabe23aed2430444
  dropToken ::
    GHC.Types.Char
    -> GHC.Types.Int -> [[GHC.Types.Char]] -> [[GHC.Types.Char]]
  {- Arity: 3, Strictness: <L,U><S(S),1*U(U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Char)
                   (w1 :: GHC.Types.Int)
                   (w2 :: [[GHC.Types.Char]]) ->
                 case w1 of ww { GHC.Types.I# ww1 -> Lib.$wdropToken w ww1 w2 }) -}
ed558c84dd7a2a10e51315a61986384e
  getChoice ::
    GHC.Types.Int -> GHC.Types.Int -> GHC.Types.IO GHC.Base.String
  {- Arity: 3, Strictness: <L,1*U(U)><L,1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.getChoice1
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R)) -}
91f2ff70c11e6730e50222629b08d2b0
  getChoice1 ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 3, Strictness: <L,1*U(U)><L,1*U(U)><S,U> -}
69075f6cea32ecdc1ef8a6d927c9068c
  playWith ::
    [(GHC.Types.Int, GHC.Types.Char)]
    -> [[GHC.Types.Char]] -> GHC.Types.IO b
  {- Arity: 3, Strictness: <L,U><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.playWith1
                  `cast`
                (forall (b :: <*>_N).
                 <[(GHC.Types.Int, GHC.Types.Char)]>_R
                 ->_R <[[GHC.Types.Char]]>_R
                 ->_R Sym (GHC.Types.N:IO[0] <b>_R)) -}
c9e79e499ea4cee796a4f54099e27225
  playWith1 ::
    [(GHC.Types.Int, GHC.Types.Char)]
    -> [[GHC.Types.Char]]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, b #)
  {- Arity: 3, Strictness: <L,U><L,U><S,U> -}
5beed6418a2c1cd27c35932ccc1068df
  showGrid :: [[GHC.Types.Char]] -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.showGrid1
                  `cast`
                (<[[GHC.Types.Char]]>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
e5376bcc80a55aad2c05923327f96b95
  showGrid1 ::
    [[GHC.Types.Char]]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: (\ (grid :: [[GHC.Types.Char]])
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   (case GHC.Base.++
                           @ [GHC.Types.Char]
                           (Data.OldList.transpose @ GHC.Types.Char grid)
                           (GHC.Types.:
                              @ [GHC.Types.Char]
                              (case GHC.List.$wlenAcc
                                      @ [GHC.Types.Char]
                                      grid
                                      0# of ww2 { DEFAULT ->
                               case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.># 1# ww2) of wild {
                                 GHC.Types.False
                                 -> letrec {
                                      go :: GHC.Prim.Int# -> [GHC.Types.Char]
                                        {- Arity: 1, Strictness: <L,U> -}
                                      = \ (x1 :: GHC.Prim.Int#) ->
                                        GHC.Types.:
                                          @ GHC.Types.Char
                                          Lib.showGrid6
                                          (case GHC.Show.$wshowSignedInt
                                                  0#
                                                  x1
                                                  (GHC.Types.[]
                                                     @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                           GHC.Base.++
                                             @ GHC.Types.Char
                                             (GHC.Types.: @ GHC.Types.Char ww5 ww6)
                                             (case GHC.Prim.tagToEnum#
                                                     @ GHC.Types.Bool
                                                     (GHC.Prim.==# x1 ww2) of wild1 {
                                                GHC.Types.False -> go (GHC.Prim.+# x1 1#)
                                                GHC.Types.True
                                                -> GHC.Types.[] @ GHC.Types.Char }) })
                                    } in
                                    case go 1# of wild1 {
                                      [] -> Lib.showGrid5
                                      : ds1 xs
                                      -> GHC.List.filter
                                           @ GHC.Types.Char
                                           GHC.Unicode.isAlphaNum
                                           xs }
                                 GHC.Types.True -> Lib.showGrid5 } })
                              Lib.showGrid3) of wild {
                      [] -> GHC.Types.[] @ GHC.Types.Char
                      : x1 xs1
                      -> Data.OldList.intercalate_$spoly_go
                           @ GHC.Types.Char
                           x1
                           (Data.OldList.prependToAll @ [GHC.Types.Char] Lib.showGrid2 xs1) })
                   GHC.Types.True
                   eta) -}
105ee446e76b2aa0c97cfeea79c8d351
  showGrid2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "\n"#) -}
625d074071b8acf10a1d9d9fc2480cef
  showGrid3 :: [[GHC.Types.Char]]
  {- Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Lib.showGrid4
                   (GHC.Types.[] @ [GHC.Types.Char])) -}
59a7c53811f13cf74303fe01c50e5e70
  showGrid4 :: [GHC.Types.Char]
  {- Unfolding: (case Lib.$wxs 16# of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ GHC.Types.Char ww1 ww2 }) -}
477d9e6ae40bd33ab29294288212698e
  showGrid5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.List.filter
                   @ GHC.Types.Char
                   GHC.Unicode.isAlphaNum
                   (GHC.Types.[] @ GHC.Types.Char)) -}
5c9e911e27fb1f4a5a6ecb940a338d25
  showGrid6 :: GHC.Types.Char
  {- HasNoCafRefs, Unfolding: (GHC.Types.C# ' '#) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

