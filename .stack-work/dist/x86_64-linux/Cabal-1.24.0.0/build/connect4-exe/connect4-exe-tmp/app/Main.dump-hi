
==================== FINAL INTERFACE ====================
2016-10-27 18:46:07.916431 UTC

interface main@main:Main 8001
  interface hash: bb60ec6fe2c092dd804393a44085d9f2
  ABI hash: e9ec0960c3cb2fd827abef57465d50bc
  export-list hash: b92e9b9afa8d8ed379e11a24aeb68237
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 45aebc7f20771f348c9cf93c597a41e6
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
module dependencies:
package dependencies: base-4.9.0.0*
                      connect4-0.1.0.0@connect4-0.1.0.0-72dbdpWjjZ73fXhjRJQRqF
                      ghc-prim-0.5.0.0 integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:Control.Monad 7767aebfd53f0b584cef2fe66ad3986c
import  -/  base-4.9.0.0:Data.Char eb33dc25ecb52d018a0ca26590e2b50b
import  -/  base-4.9.0.0:Data.List 49b86831b79b49ce5d4d9416ecba61df
import  -/  base-4.9.0.0:Data.OldList 0058409f994fb13ae0616e3f1e5b4dae
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.IO.Handle a1938753d58593f0a419f85b67aa7cd3
import  -/  base-4.9.0.0:GHC.IO.Handle.FD adf0145182d1c6eb38b2b8ce5a292e84
import  -/  base-4.9.0.0:GHC.IO.Handle.Types a94506fe2fe805a97a84bccd65c71eb8
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  base-4.9.0.0:System.Environment ee0914a962f5508d0fd404c89ee4999b
import  -/  base-4.9.0.0:System.Exit 4df7be78e54bbe200276120bd44e7e2a
import  -/  base-4.9.0.0:System.IO eb1d40aa793a4047069a5023f2ebcfe3
import  -/  base-4.9.0.0:Text.Read 9c1be14f7e5eac8b18bcb566c5763677
import  -/  connect4-0.1.0.0@connect4-0.1.0.0-72dbdpWjjZ73fXhjRJQRqF:Game f805ce0c7743688fb9086697db186855
import  -/  connect4-0.1.0.0@connect4-0.1.0.0-72dbdpWjjZ73fXhjRJQRqF:Lib 1aed59d7a5c9fee0166297d8228448aa
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
5ad3b09045d09105a108bb882f32eb37
  main :: GHC.Types.IO b
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1
                  `cast`
                (forall (b :: <*>_N). Sym (GHC.Types.N:IO[0] <b>_R)) -}
582e29640e92e8ecb5e19f7eaa32d92b
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, b #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ @ b
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.hSetBuffering1
                        GHC.IO.Handle.FD.stdout
                        GHC.IO.Handle.Types.NoBuffering
                        s of ds1 { (#,#) ipv ipv1 ->
                 case System.Environment.getArgs1 ipv of ds2 { (#,#) ipv2 ipv3 ->
                 Lib.playWith1
                   @ b
                   (Main.main_go
                      1#
                      (Data.OldList.nubBy
                         @ GHC.Types.Char
                         GHC.Classes.eqChar
                         (GHC.List.$w!! @ GHC.Base.String ipv3 0#)))
                   (case Text.Read.readEither6
                           @ GHC.Types.Int
                           (Text.ParserCombinators.ReadP.run
                              @ GHC.Types.Int
                              Main.main2
                              (GHC.List.$w!! @ GHC.Base.String ipv3 2#)) of wild {
                      []
                      -> case GHC.Err.error
                                @ 'GHC.Types.PtrRepLifted
                                @ GHC.Types.Int
                                GHC.Err.errorWithoutStackTrace_wild1
                                  `cast`
                                (Sym (GHC.Classes.N:IP[0]
                                          <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                                Text.Read.readEither4
                         ret_ty [[GHC.Types.Char]]
                         of {}
                      : x ds
                      -> case ds of wild1 {
                           []
                           -> case x of ww { GHC.Types.I# ww1 ->
                              Game.$wmakeGrid
                                (case Text.Read.readEither6
                                        @ GHC.Types.Int
                                        (Text.ParserCombinators.ReadP.run
                                           @ GHC.Types.Int
                                           Main.main2
                                           (GHC.List.$w!! @ GHC.Base.String ipv3 1#)) of wild2 {
                                   []
                                   -> GHC.Err.error
                                        @ 'GHC.Types.PtrRepLifted
                                        @ GHC.Types.Int
                                        GHC.Err.errorWithoutStackTrace_wild1
                                          `cast`
                                        (Sym (GHC.Classes.N:IP[0]
                                                  <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                                        Text.Read.readEither4
                                   : x1 ds3
                                   -> case ds3 of wild3 {
                                        [] -> x1
                                        : ipv4 ipv5
                                        -> GHC.Err.error
                                             @ 'GHC.Types.PtrRepLifted
                                             @ GHC.Types.Int
                                             GHC.Err.errorWithoutStackTrace_wild1
                                               `cast`
                                             (Sym (GHC.Classes.N:IP[0]
                                                       <"callStack">_N
                                                       <GHC.Stack.Types.CallStack>_N))
                                             Text.Read.readEither2 } })
                                ww1 }
                           : ipv4 ipv5
                           -> case GHC.Err.error
                                     @ 'GHC.Types.PtrRepLifted
                                     @ GHC.Types.Int
                                     GHC.Err.errorWithoutStackTrace_wild1
                                       `cast`
                                     (Sym (GHC.Classes.N:IP[0]
                                               <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                                     Text.Read.readEither2
                              ret_ty [[GHC.Types.Char]]
                              of {} } })
                   ipv2 } }) -}
c356bd6676f7c263267afb1e9ca53b75
  main2 :: Text.ParserCombinators.ReadP.P GHC.Types.Int
  {- Unfolding: ((GHC.Read.$fReadInt3
                    GHC.Read.$fReadInt_$sconvertInt
                    Text.ParserCombinators.ReadPrec.minPrec)
                   `cast`
                 (Text.ParserCombinators.ReadP.N:ReadP[0] <GHC.Types.Int>_R)
                   @ GHC.Types.Int
                   (Text.Read.readEither5 @ GHC.Types.Int)) -}
64596f431396e6ecaea237ecdec65021
  main3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Any #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ GHC.Prim.Any
                   (Main.main1 @ GHC.Prim.Any)
                     `cast`
                   (Sym (GHC.Types.N:IO[0] <GHC.Prim.Any>_R))) -}
d459a083427a14b38c7d8e4a2d96d2d6
  main_go ::
    GHC.Prim.Int#
    -> [GHC.Types.Char] -> [(GHC.Types.Int, GHC.Types.Char)]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U> -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

